{
  "version": "1.0.0",
  "timestamp": "2025-01-12T00:00:00Z",
  "project": {
    "name": "Claude Code iOS UI",
    "description": "Native iOS client for Claude Code with cyberpunk-themed UI communicating with Node.js backend",
    "repository": "claude-code-ios-ui",
    "type": "iOS Application with Backend API"
  },
  "overview": {
    "goals": [
      "Create a native iOS client for Claude Code",
      "Implement cyberpunk-themed UI with neon aesthetics",
      "Enable real-time communication with backend server",
      "Support project management with chat sessions",
      "Provide file exploration and terminal capabilities"
    ],
    "architecture": {
      "frontend": {
        "platform": "iOS",
        "language": "Swift 5.9",
        "frameworks": ["UIKit", "SwiftUI"],
        "minVersion": "iOS 17.0",
        "patterns": ["MVVM", "Coordinators"],
        "persistence": "SwiftData"
      },
      "backend": {
        "platform": "Node.js",
        "framework": "Express",
        "port": 3004,
        "database": "SQLite",
        "realtime": "WebSocket (ws)",
        "authentication": "None (localhost development)"
      }
    },
    "dependencies": {
      "ios": [],
      "backend": [
        "express",
        "ws",
        "sqlite3",
        "multer",
        "helmet",
        "cors"
      ]
    }
  },
  "currentState": {
    "implementedFeatures": [
      "Backend server with Express API",
      "WebSocket support for real-time messaging",
      "iOS app structure with MVVM pattern",
      "Cyberpunk UI theme implementation",
      "Project management endpoints",
      "Chat/session handling",
      "File explorer functionality",
      "Terminal command execution",
      "Settings management with backup/restore"
    ],
    "workInProgress": [
      "Debugging backend-iOS communication",
      "Verifying project listing functionality",
      "Testing session navigation within projects",
      "Validating real-time message streaming",
      "iOS app screenshot capabilities"
    ],
    "knownIssues": [
      "Project display might not show all projects correctly",
      "Session navigation within projects needs verification",
      "Real-time message streaming visualization needs testing",
      "WebSocket connection stability needs confirmation",
      "Widget extension not implemented",
      "Push notifications not configured",
      "No authentication system",
      "File size limited to 10MB"
    ],
    "performanceBaselines": {
      "appLaunch": "<2 seconds",
      "memoryUsage": "<150MB baseline",
      "webSocketReconnect": "<3 seconds",
      "screenTransitions": "<300ms"
    }
  },
  "designDecisions": {
    "architecture": {
      "mvvmCoordinators": "Separation of concerns with ViewControllers, ViewModels, and navigation flow",
      "dependencyInjection": "DIContainer provides services to ViewControllers",
      "webSocketCommunication": "Real-time messaging with auto-reconnection strategy",
      "swiftDataPersistence": "Local data storage with automatic migrations"
    },
    "apiDesign": {
      "restfulEndpoints": "Standard REST verbs for CRUD operations",
      "webSocketProtocol": "JSON message format with type/content/metadata structure",
      "sessionConcept": "Sessions are chats within projects",
      "errorHandling": "Result types with success/failure cases"
    },
    "uiDesign": {
      "cyberpunkTheme": {
        "primaryColors": {
          "cyan": "#00D9FF",
          "pink": "#FF006E"
        },
        "effects": ["Glow effects", "Scanlines", "Neon animations"],
        "typography": "Futuristic monospace fonts"
      }
    },
    "security": {
      "currentState": "Development only (localhost)",
      "productionRequirements": [
        "JWT authentication",
        "Keychain storage",
        "Certificate pinning",
        "Database encryption",
        "Jailbreak detection"
      ]
    }
  },
  "codePatterns": {
    "swift": {
      "conventions": [
        "Use async/await for concurrency",
        "Weak self in closures",
        "Final classes when not inherited",
        "Result types for error handling",
        "Guard statements for early returns"
      ],
      "errorHandling": "Result<Success, Failure> pattern",
      "networking": "APIClient singleton with completion handlers",
      "testing": "XCTest framework with UI tests"
    },
    "javascript": {
      "conventions": [
        "ES6+ syntax with async/await",
        "Express middleware pattern",
        "Error-first callbacks",
        "Try/catch for async operations"
      ],
      "errorHandling": "Centralized error middleware",
      "database": "Promisified SQLite queries",
      "testing": "Jest framework (when configured)"
    }
  },
  "apiEndpoints": {
    "health": {
      "GET /api/health": "Server health check"
    },
    "projects": {
      "GET /api/projects": "List all projects",
      "POST /api/projects": "Create new project",
      "PUT /api/projects/:id": "Update project",
      "DELETE /api/projects/:id": "Delete project"
    },
    "chat": {
      "POST /api/chat/message": "Send message",
      "WS /api/chat/ws": "WebSocket connection for real-time"
    },
    "files": {
      "GET /api/files/:projectId": "Get file tree",
      "POST /api/files/create": "Create file",
      "PUT /api/files/rename": "Rename file",
      "DELETE /api/files/delete": "Delete file"
    },
    "terminal": {
      "POST /api/terminal/execute": "Execute command"
    },
    "settings": {
      "GET /api/settings": "Get settings",
      "POST /api/settings": "Update settings",
      "POST /api/settings/export": "Export settings",
      "POST /api/settings/import": "Import settings"
    }
  },
  "webSocketProtocol": {
    "url": "ws://localhost:3004/api/chat/ws",
    "messageFormat": {
      "type": "message|typing|status|error",
      "content": "string",
      "userId": "string",
      "timestamp": "ISO-8601",
      "metadata": "object"
    },
    "reconnection": {
      "strategy": "exponential backoff",
      "maxRetries": 10,
      "maxDelay": "30 seconds"
    }
  },
  "fileStructure": {
    "backend": {
      "root": "/backend",
      "key_files": [
        "server.js",
        "package.json",
        "routes/projects.js",
        "routes/chat.js",
        "routes/files.js",
        "routes/terminal.js",
        "routes/settings.js",
        "models/Project.js",
        "models/ChatMessage.js",
        "database/db.js"
      ]
    },
    "ios": {
      "root": "/ClaudeCodeUI-iOS",
      "structure": {
        "Core": ["Config", "Navigation", "Network", "Services", "Accessibility"],
        "Features": ["Projects", "Chat", "FileExplorer", "Terminal", "Settings", "Onboarding"],
        "Design": ["Theme", "Effects"],
        "Models": ["SwiftData entities"]
      },
      "key_files": [
        "Core/Network/APIClient.swift",
        "Core/Network/WebSocketManager.swift",
        "Core/Navigation/AppCoordinator.swift",
        "Features/Projects/ProjectsViewController.swift",
        "Features/Chat/ChatViewController.swift",
        "Models/Project.swift",
        "Models/ChatMessage.swift"
      ]
    }
  },
  "testingStrategy": {
    "backend": {
      "framework": "npm test (when configured)",
      "coverage": "To be implemented"
    },
    "ios": {
      "unit": "XCTest framework",
      "ui": "XCUITest",
      "scenarios": [
        "Onboarding flow completion",
        "Project CRUD operations",
        "WebSocket message send/receive",
        "File operations",
        "Terminal command execution",
        "Settings backup/restore",
        "Accessibility support",
        "Performance benchmarks"
      ]
    }
  },
  "agentCoordination": {
    "history": [
      {
        "date": "2025-01-12",
        "agents": ["debugger", "context-manager"],
        "task": "Analyze backend-iOS communication and save project context",
        "findings": "Need to verify project listing, session navigation, and real-time streaming"
      }
    ],
    "recommendations": {
      "debugging": "Use debugger agent for communication issues",
      "performance": "Use performance-engineer for optimization",
      "testing": "Use test-automator for comprehensive test coverage",
      "documentation": "Use architect-reviewer for system documentation"
    }
  },
  "futureRoadmap": {
    "immediate": [
      "Debug and fix backend-iOS communication",
      "Verify project listing functionality",
      "Test session navigation within projects",
      "Validate real-time message streaming",
      "Capture iOS app screenshots"
    ],
    "shortTerm": [
      "Implement authentication system",
      "Add push notifications",
      "Configure widget extension",
      "Implement share extension",
      "Add offline mode support"
    ],
    "longTerm": [
      "Production deployment preparation",
      "Security hardening",
      "Performance optimization",
      "Cross-platform support (iPadOS, macOS)",
      "Cloud synchronization"
    ]
  },
  "debuggingFocus": {
    "current": "Backend-iOS communication analysis",
    "areas": [
      "Project API calls verification",
      "Session handling within projects",
      "WebSocket message flow",
      "Real-time streaming implementation",
      "UI visualization of data"
    ],
    "approach": "Use 200 sequential thoughts for thorough analysis of all files"
  }
}