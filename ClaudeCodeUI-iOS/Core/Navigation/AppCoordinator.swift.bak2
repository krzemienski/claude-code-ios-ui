//
//  AppCoordinator.swift
//  ClaudeCodeUI
//
//  Created by Claude Code on 2024-08-05.
//

import UIKit

// Import LoginViewController from Authentication feature
import Foundation

// MARK: - App Coordinator
// The view controllers are now properly organized:
// - Features/Projects/ProjectsViewController.swift - Dynamic project list with backend integration
// - Features/Main/MainTabBarController.swift - Dynamic tab bar that adds Chat tab when project selected
// - Core/Navigation/ViewControllers.swift - Bridge implementations for backend connectivity

// Import the actual MainTabBarController from Features folder
// The file exists at Features/Main/MainTabBarController.swift and is declared as public

// Since both files are in the same module, we need to import the missing view controllers
// that MainTabBarController depends on

// Simple theme colors for temp view controllers
private struct SimpleCyberpunkTheme {
    static let background = UIColor(red: 0.04, green: 0.04, blue: 0.06, alpha: 1.0)
    static let surface = UIColor(red: 0.1, green: 0.1, blue: 0.18, alpha: 1.0)
    static let primaryCyan = UIColor(red: 0, green: 0.85, blue: 1, alpha: 1.0)
    static let primaryText = UIColor.white
    static let secondaryText = UIColor(white: 0.88, alpha: 1.0)
    static let border = UIColor(red: 0.16, green: 0.16, blue: 0.25, alpha: 1.0)
}

// Simple project model for temp view controllers
private struct SimpleProject: Codable {
    let id: String
    let name: String
    let path: String
}

// Temporary duplicate view controllers - these should be removed
// Using the real implementations from Features folder instead
class TempProjectsViewController: UIViewController {
    private var projects: [SimpleProject] = []
    private let tableView = UITableView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Projects"
        view.backgroundColor = SimpleCyberpunkTheme.background
        setupUI()
        loadProjects()
    }
    
    private func setupUI() {
        tableView.backgroundColor = SimpleCyberpunkTheme.background
        tableView.separatorColor = SimpleCyberpunkTheme.border
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "ProjectCell")
        
        view.addSubview(tableView)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            barButtonSystemItem: .add,
            target: self,
            action: #selector(createProject)
        )
        navigationItem.rightBarButtonItem?.tintColor = SimpleCyberpunkTheme.primaryCyan
    }
    
    private func loadProjects() {
        Task {
            do {
                guard let url = URL(string: "http://192.168.0.152:3004/api/projects") else { return }
                
                // Configure request with auth token if available
                var request = URLRequest(url: url)
                
                // For demo, hardcode the token we created earlier
                // In production, this would come from secure storage
                let authToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInVzZXJuYW1lIjoiZGVtbyIsImlhdCI6MTc1NTA2NTQxOH0.jn8Xw7rocaENRKJCxDgZfFq9fBjaoVzcjzxjfLevY40"
                request.setValue("Bearer \(authToken)", forHTTPHeaderField: "Authorization")
                
                let (data, _) = try await URLSession.shared.data(for: request)
                let fetchedProjects = try JSONDecoder().decode([SimpleProject].self, from: data)
                await MainActor.run {
                    self.projects = fetchedProjects
                    self.tableView.reloadData()
                }
            } catch {
                print("Failed to load projects: \(error)")
                // For now, show some demo projects
                await MainActor.run {
                    self.projects = [
                        SimpleProject(id: "demo-1", name: "My First Project", path: "/Users/demo/project1"),
                        SimpleProject(id: "demo-2", name: "Test Project", path: "/Users/demo/test")
                    ]
                    self.tableView.reloadData()
                }
            }
        }
    }
    
    @objc private func createProject() {
        let alert = UIAlertController(title: "New Project", message: "Enter project name", preferredStyle: .alert)
        alert.addTextField { textField in
            textField.placeholder = "Project Name"
        }
        let createAction = UIAlertAction(title: "Create", style: .default) { [weak self] _ in
            guard let name = alert.textFields?[0].text, !name.isEmpty else { return }
            let newProject = SimpleProject(id: UUID().uuidString, name: name, path: "/Users/\(name)")
            self?.projects.append(newProject)
            self?.tableView.reloadData()
        }
        alert.addAction(createAction)
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel))
        present(alert, animated: true)
    }
}

extension TempProjectsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return projects.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ProjectCell", for: indexPath)
        let project = projects[indexPath.row]
        cell.textLabel?.text = project.name
        cell.textLabel?.textColor = SimpleCyberpunkTheme.primaryText
        cell.backgroundColor = SimpleCyberpunkTheme.surface
        return cell
    }
}

extension TempProjectsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

class TempChatViewController: UIViewController {
    private let textView = UITextView()
    private let inputField = UITextField()
    
    fileprivate init(project: SimpleProject?) {
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Chat"
        view.backgroundColor = SimpleCyberpunkTheme.background
        setupUI()
    }
    
    private func setupUI() {
        textView.backgroundColor = SimpleCyberpunkTheme.surface
        textView.textColor = .white
        textView.font = UIFont.systemFont(ofSize: 14)
        textView.isEditable = false
        textView.text = "Claude Code Chat\n\nConnected to backend at localhost:3004\n\n"
        
        inputField.backgroundColor = SimpleCyberpunkTheme.surface
        inputField.textColor = .white
        inputField.placeholder = "Type a message..."
        inputField.borderStyle = .roundedRect
        
        view.addSubview(textView)
        view.addSubview(inputField)
        
        textView.translatesAutoresizingMaskIntoConstraints = false
        inputField.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            textView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 16),
            textView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            textView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            textView.bottomAnchor.constraint(equalTo: inputField.topAnchor, constant: -16),
            
            inputField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            inputField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            inputField.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            inputField.heightAnchor.constraint(equalToConstant: 44)
        ])
    }
}

class TempFileExplorerViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Files"
        view.backgroundColor = SimpleCyberpunkTheme.background
        
        let label = UILabel()
        label.text = "File Explorer"
        label.textColor = SimpleCyberpunkTheme.primaryText
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        label.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(label)
        
        NSLayoutConstraint.activate([
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            label.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
}

class TempTerminalViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Terminal"
        view.backgroundColor = SimpleCyberpunkTheme.background
        
        let textView = UITextView()
        textView.backgroundColor = .black
        textView.textColor = UIColor(red: 0, green: 1, blue: 0, alpha: 1.0)
        textView.font = UIFont(name: "Menlo", size: 12) ?? UIFont.systemFont(ofSize: 12)
        textView.isEditable = false
        textView.text = "$ Claude Code Terminal v1.0\n$ Backend connected at localhost:3004\n$ Ready for commands...\n$ "
        
        view.addSubview(textView)
        textView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            textView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            textView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            textView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            textView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
}

class TempSettingsViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Settings"
        view.backgroundColor = SimpleCyberpunkTheme.background
        
        let stackView = UIStackView()
        stackView.axis = .vertical
        stackView.spacing = 20
        stackView.translatesAutoresizingMaskIntoConstraints = false
        
        let backendLabel = UILabel()
        backendLabel.text = "Backend URL"
        backendLabel.textColor = SimpleCyberpunkTheme.primaryText
        backendLabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        
        let urlLabel = UILabel()
        urlLabel.text = "http://localhost:3004"
        urlLabel.textColor = SimpleCyberpunkTheme.primaryCyan
        urlLabel.font = UIFont.systemFont(ofSize: 14)
        
        let statusLabel = UILabel()
        statusLabel.text = "✓ Connected"
        statusLabel.textColor = UIColor.systemGreen
        statusLabel.font = UIFont.systemFont(ofSize: 14)
        
        stackView.addArrangedSubview(backendLabel)
        stackView.addArrangedSubview(urlLabel)
        stackView.addArrangedSubview(statusLabel)
        
        view.addSubview(stackView)
        
        NSLayoutConstraint.activate([
            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
}

// Import the view controllers from ViewControllers.swift which provides
// connectivity to the backend at localhost:3004

// MARK: - Main Tab Bar Controller
// This is now moved to Features/Main/MainTabBarController.swift for dynamic tab management

// MARK: - Coordinator Protocol
protocol Coordinator: AnyObject {
    var childCoordinators: [Coordinator] { get set }
    var navigationController: UINavigationController { get set }
    
    func start()
}

// MARK: - App Coordinator
class AppCoordinator: Coordinator {
    
    // MARK: - Properties
    var childCoordinators: [Coordinator] = []
    var navigationController: UINavigationController
    private let window: UIWindow
    
    // MARK: - Initialization
    init(window: UIWindow) {
        self.window = window
        self.navigationController = UINavigationController()
        self.navigationController.navigationBar.prefersLargeTitles = true
    }
    
    // MARK: - Start
    func start() {
        // Check authentication status
        checkAuthentication()
    }
    
    // MARK: - Navigation
    private func checkAuthentication() {
        Task {
            do {
                // Check if we have a saved auth token
                let dataContainer = SwiftDataContainer.shared
                let settings = try await dataContainer.fetchSettings()
                
                if let token = settings.authToken, !token.isEmpty {
                    // Set token in API client
                    await DIContainer.shared.apiClient.setAuthToken(token)
                    
                    // Try to verify auth status with backend
                    let authStatusURL = URL(string: AppConfig.backendURL + "/api/auth/status")!
                    var request = URLRequest(url: authStatusURL)
                    request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
                    request.timeoutInterval = 5
                    
                    do {
                        let (_, response) = try await URLSession.shared.data(for: request)
                        if let httpResponse = response as? HTTPURLResponse,
                           httpResponse.statusCode == 200 {
                            // Token is valid, proceed to main interface
                            await MainActor.run {
                                self.showMainInterface()
                            }
                            return
                        }
                    } catch {
                        print("Auth check failed: \(error)")
                    }
                }
                
                // No valid token or auth check failed, show login
                await MainActor.run {
                    self.showLoginScreen()
                }
                
            } catch {
                print("Error checking authentication: \(error)")
                await MainActor.run {
                    self.showLoginScreen()
                }
            }
        }
    }
    
    private func showLoginScreen() {
        // Temporarily skip login and go directly to main screen
        // let loginVC = LoginViewController()
        // window.rootViewController = loginVC
        
        Task { @MainActor in
            self.showMainInterface()
        }
    }
    
    @MainActor
    private func checkOnboardingStatus() async -> Bool {
        // Skip onboarding check for now
        return true
    }
    
    private func showLaunchScreen() {
        let launchViewController = UIViewController()
        launchViewController.view.backgroundColor = UIColor(red: 0.05, green: 0.05, blue: 0.1, alpha: 1.0)
        
        let label = UILabel()
        label.text = "Claude Code"
        label.font = UIFont.systemFont(ofSize: 36, weight: .bold)
        label.textColor = UIColor(red: 0, green: 0.85, blue: 1, alpha: 1.0)
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        launchViewController.view.addSubview(label)
        
        NSLayoutConstraint.activate([
            label.centerXAnchor.constraint(equalTo: launchViewController.view.centerXAnchor),
            label.centerYAnchor.constraint(equalTo: launchViewController.view.centerYAnchor)
        ])
        
        window.rootViewController = launchViewController
    }
    
    private func showAuthenticationFlow() {
        let authCoordinator = AuthenticationCoordinator(navigationController: navigationController)
        authCoordinator.delegate = self
        childCoordinators.append(authCoordinator)
        authCoordinator.start()
        
        window.rootViewController = navigationController
    }
    
    private func showMainInterface() {
        // Create a basic tab bar controller with projects and settings
        // MainTabBarController is not currently included in the Xcode project build
        let tabBarController = UITabBarController()
        
        // Projects Tab
        let projectsVC = TempProjectsViewController()
        let projectsNav = UINavigationController(rootViewController: projectsVC)
        projectsNav.tabBarItem = UITabBarItem(
            title: "Projects",
            image: UIImage(systemName: "folder.fill"),
            selectedImage: UIImage(systemName: "folder.fill.badge.plus")
        )
        
        // Settings Tab
        let settingsVC = TempSettingsViewController()
        let settingsNav = UINavigationController(rootViewController: settingsVC)
        settingsNav.tabBarItem = UITabBarItem(
            title: "Settings",
            image: UIImage(systemName: "gearshape.fill"),
            selectedImage: UIImage(systemName: "gearshape.2.fill")
        )
        
        // Configure tab bar
        tabBarController.viewControllers = [projectsNav, settingsNav]
        tabBarController.tabBar.backgroundColor = SimpleCyberpunkTheme.background
        tabBarController.tabBar.tintColor = SimpleCyberpunkTheme.primaryCyan
        tabBarController.tabBar.unselectedItemTintColor = SimpleCyberpunkTheme.secondaryText
        
        // Style navigation bars
        let appearance = UINavigationBarAppearance()
        appearance.configureWithOpaqueBackground()
        appearance.backgroundColor = SimpleCyberpunkTheme.background
        appearance.titleTextAttributes = [.foregroundColor: SimpleCyberpunkTheme.primaryText]
        appearance.largeTitleTextAttributes = [.foregroundColor: SimpleCyberpunkTheme.primaryText]
        
        [projectsNav, settingsNav].forEach { nav in
            nav.navigationBar.standardAppearance = appearance
            nav.navigationBar.scrollEdgeAppearance = appearance
            nav.navigationBar.prefersLargeTitles = true
            nav.navigationBar.tintColor = SimpleCyberpunkTheme.primaryCyan
        }
        
        // Animate transition
        UIView.transition(with: window, duration: 0.5, options: .transitionCrossDissolve, animations: {
            self.window.rootViewController = tabBarController
        })
    }
    
    // MARK: - Child Coordinator Management
    func childDidFinish(_ child: Coordinator?) {
        for (index, coordinator) in childCoordinators.enumerated() {
            if coordinator === child {
                childCoordinators.remove(at: index)
                break
            }
        }
    }
}

// MARK: - Authentication Coordinator Delegate
extension AppCoordinator: AuthenticationCoordinatorDelegate {
    func authenticationCoordinatorDidComplete(_ coordinator: AuthenticationCoordinator) {
        childDidFinish(coordinator)
        showMainInterface()
    }
}

// MARK: - Authentication Coordinator
class AuthenticationCoordinator: Coordinator {
    weak var delegate: AuthenticationCoordinatorDelegate?
    var childCoordinators: [Coordinator] = []
    var navigationController: UINavigationController
    
    init(navigationController: UINavigationController) {
        self.navigationController = navigationController
    }
    
    func start() {
        // Create simple authentication view controller
        let authVC = UIViewController()
        authVC.view.backgroundColor = UIColor(red: 0.05, green: 0.05, blue: 0.1, alpha: 1.0)
        authVC.title = "Authentication"
        navigationController.pushViewController(authVC, animated: false)
    }
}

protocol AuthenticationCoordinatorDelegate: AnyObject {
    func authenticationCoordinatorDidComplete(_ coordinator: AuthenticationCoordinator)
}
